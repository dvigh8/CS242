import java.io.File;
import java.io.Console;
/** @author David Josephs
* CS242 
@since 2015-10-28
*/
public class encrypt{
		/**<p>
		This takes 4 commandline arguments
		encrypt -e string -- This encrypts the string.
		encrypt -d string key -- This decrypts the string using key.
		encrypt -fe file -o fileout -- This encrypts the contents of file to fileout.
		encrypt -fd file -o fileout key -- This decrypts the contents file to fileout using key.
		Else the program will launch an iteractive display.
		<p>
		@param args This takes the command line arguments.
		*/
		public static void main(String[] args){
		Integer argssize = new Integer(args.length);
		SimpleEncryptor textE = new SimpleEncryptor();
		FileEncryptor fileE = new FileEncryptor();
		
		if(argssize.equals(0)){
			Console console = System.console();
			String selection = new String();
			
			System.out.println("Welcome to this encrypton program.");
			System.out.printf("Type e or d for text encryption and decryption,\nand fe or fd for file encrypton and decryption\n");
			System.out.printf("Type Choice: ");
			selection = console.readLine();
			while(!selection.equals("e") && !selection.equals("d") && !selection.equals("fd") && !selection.equals("fe")){
				System.out.printf("Input Invalid try again\nType Choice: ");
				selection = console.readLine();
			}
			if(selection.equals("d")){
				
				System.out.printf("Decryption key: ");
				int key = Integer.parseInt(console.readLine());
				System.out.printf("Enter what you want to decrypt: ");
				selection = console.readLine();
				textE.textDecrypt(selection, key);
				System.out.println(textE.encrypted);
			}
			else if(selection.equals("e")){
				System.out.printf("Enter what you want to encrypt: ");
				selection = console.readLine();
				textE.textEncrypt(selection,SimpleEncryptor.encryptKey(selection));
				textE.encrypted += ":" + SimpleEncryptor.encryptKey(selection);
				System.out.println(textE.encrypted);
			}
			else if(selection.equals("fd")){
				
				System.out.printf("Decryption key: ");
				int key = Integer.parseInt(console.readLine());
				System.out.printf("Enter the file you want to decrypt: ");
				selection = console.readLine();
				int count = 0;
				while(!(new File(selection).exists())){
					System.out.printf("File does not exist\nEnter New File: ");
					selection = console.readLine();
					if(count++ == 1){
						count = -1;
						break;
					}	
				}
				if(!(count == -1)){
					File inputF = new File(selection);
					System.out.printf("Enter output file: ");
					selection = console.readLine();
					File outputF = new File(selection);
					fileE.fileDecrypt(inputF,outputF,(byte)key);
				}
				else{
					System.out.println("Too many invalid inputs program terminated");
				}			
			}
			else{
				System.out.printf("Enter the file you want to encrypt: ");
				selection = console.readLine();
				int count = 0;
				while(!(new File(selection).exists())){
					System.out.printf("File does not exist\nEnter New File: ");
					selection = console.readLine();
					if(count++ == 1){
						count = -1;
						break;
					}	
				}
				
				if(!(count == -1)){
					File inputF = new File(selection);
					System.out.printf("Enter output file: ");
					selection = console.readLine();
					File outputF = new File(selection);
					System.out.println("The decryption key is " + FileEncryptor.fileEncryptKey(inputF)); // this is put before the encrytption incase the input file is edited during the encryption
					fileE.fileEncrypt(inputF,outputF,FileEncryptor.fileEncryptKey(inputF));
				}
				else{
					System.out.println("Too many invalid inputs program terminated");
				}
			}
		}
		else if (args[0].equals("-e") && argssize.equals(2)){	// commandline argument handler
			textE.textEncrypt(args[1], SimpleEncryptor.encryptKey(args[1]));
			System.out.println(textE.encrypted + ":" + SimpleEncryptor.encryptKey(args[1]));
		}
		else if (args[0].equals("-d") && argssize.equals(3)){ // commandline argument handler
			textE.textDecrypt(args[1],Integer.parseInt(args[2]));
			System.out.println(textE.encrypted);
		}
		else if (args[0].equals("-fe") && args[2].equals("-o") && argssize.equals(4)){ // commandline argument handler
			if(!(new File(args[1]).exists())){System.out.println("File does not exist");}
			else{
			System.out.println(FileEncryptor.fileEncryptKey(new File(args[1])));
			fileE.fileEncrypt(new File(args[1]), new File(args[3]),FileEncryptor.fileEncryptKey(new File(args[1])));
			}
		}
		else if (args[0].equals("-fd") && args[2].equals("-o") && argssize.equals(5)){ // commandline argument handler
			if(!(new File(args[1]).exists())){System.out.println("File does not exist");}
			else{fileE.fileDecrypt(new File(args[1]), new File(args[3]), (byte)Integer.parseInt(args[4]));}
		}
		else { // if the three options do not work the program will show and terminate
			System.out.println("Program Faild to run, arguments invalid");
		}
	}
}
import javafx.application.Application;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.event.ActionEvent; 
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.stage.FileChooser.*;
import javafx.stage.FileChooser;
import java.io.*;
import javafx.geometry.*;
import java.util.*;
/** @author David Josephs
* CS242
@since 2015-10-28
*/
public class EncryptTo extends Application {
	
	FileEncryptor encrypt = new FileEncryptor();
	File openFile;
	File saveFile;
	byte decryptKey;
	byte encryptKey;
	
	public static void main( String [] args ) { launch( args ); }
	/** This will show a stage with the button Encrypt and Decrypt.*/
	@Override
	public void start( Stage primaryStage ) { 

		GridPane grid = new GridPane();
		grid.setAlignment(Pos.CENTER);
		grid.setHgap(10);
		
		Button ebtn = new Button("Encrypt");
		Button dbtn = new Button("Decrypt");
		grid.add(ebtn, 0, 0);
		grid.add(dbtn, 1, 0);
		
		Scene scene = new Scene(grid, 250, 120);
		primaryStage.setTitle("Encrypt To");
		primaryStage.setScene(scene);
		primaryStage.show();
		
		ebtn.setOnAction( event -> { 
				showFileDialog();
				fileEncrypt();
		});
		dbtn.setOnAction( event -> { 
				showFileDialog();
				fileDecrypt();
		});
	}
	/** <p>
		This will show the FileChoser for a open file and save file. Each one will set the openFile or saveFile respectively. It has the option to show either text files or all files.
		</p>
		*/

	public void showFileDialog(){
		Stage mainStage = new Stage();
		
		FileChooser fileChooser = new FileChooser();
 		fileChooser.setTitle("Get Text File");
 		fileChooser.getExtensionFilters().addAll(
        		 new ExtensionFilter("Text Files", "*.txt"),
				 new ExtensionFilter("All Files", "*.*"));
		openFile = fileChooser.showOpenDialog(mainStage);

		FileChooser saveFileChooser = new FileChooser();
		saveFileChooser.setTitle("Save File");
		saveFileChooser.getExtensionFilters().addAll(
				new ExtensionFilter("Text Files", "*.txt"),
				new ExtensionFilter("All Files", "*.*"));
		saveFile = saveFileChooser.showSaveDialog(mainStage);
	}
	/** This will show the key that was used to encrypt the file in a new stage.*/
	public void showEncryptonKey(){
		
		GridPane grid = new GridPane();
		grid.setAlignment(Pos.CENTER);
		grid.setHgap(10);
		
		Label dKey = new Label("Your key is " + new Integer(encryptKey).toString());		
		grid.add(dKey, 0, 0);
		
		Button btn = new Button("Okay");
		grid.add(btn, 1, 0);
		
		Scene dScene = new Scene(grid, 250, 120);
		Stage dStage = new Stage();
		
		dStage.setTitle("Remember this");
		dStage.setScene(dScene);
		dStage.show();
		
		btn.setOnAction(event -> { dStage.hide(); });
	}
	/** This will ask for the decryption key in a TextField. When the button is pressed it calls fileDecrypt from FileEncryptor.*/
	public void fileDecrypt(){

		GridPane grid = new GridPane();
		grid.setAlignment(Pos.CENTER);
		grid.setHgap(10);
		
		TextField keyField = new TextField();
		keyField.setPromptText("Dycryption Key");
		grid.add(keyField, 0, 0);
		
		Button btn = new Button("Decrypt");
		grid.add(btn, 1, 0);
		
		Scene keyScene = new Scene(grid, 330, 120);
		Stage keyStage = new Stage();
		
		keyStage.setTitle("Decrypton Key");
		keyStage.setScene(keyScene);
		keyStage.show();
		
		btn.setOnAction(event -> {
			decryptKey = (byte)(Integer.parseInt(keyField.getText()));
			keyStage.hide();
			encrypt.fileDecrypt(openFile, saveFile, decryptKey);
		});
	}
	/** This calls fileEncrypt from FileEncryptor. Then it calls showEncryptionKey. */
	public void fileEncrypt(){
		encryptKey = FileEncryptor.fileEncryptKey(openFile);
		encrypt.fileEncrypt(openFile, saveFile, FileEncryptor.fileEncryptKey(openFile));
		showEncryptonKey();
	}
}/** @author David Josephs
 CS242
 @since 2015-10-28
*/
public abstract class Encryptor {
	
	public String encrypted = new String(); // a string to store the enctrypted or decrypted message in 
	/** Will encrypt text using the given key
		@param Input The content to be encrypted
		@param key What is used to entrypt the input.*/
	public void textEncrypt(String Input, byte key){} 
	/** Will decrypt text using the given key
		@param Input The content to be decrypted
		@param key What is used to decrypt the input.*/
	public void textDecrypt(String Input, int key){}

}import java.io.Console;
/** @author David Josephs
* CS242
@since 2015-10-28
*/
public class SimpleEncryptor extends Encryptor{
	
		public String encrypted = new String();	
	/** 
		<p>
		 * 4 is added to each character which is then moded by 128 to keep it within the bounds.
		 * This is then XOR with the encryption key.
		 Finnaly the String encrypted is set equal to the encrypted text.
		 </p>
		 *@param Input Takes any string as input.
		 @param bkey This is used as the encryption key.
		 */
	public void textEncrypt(String Input, byte bkey){
		
		String Output = new String();
		for(int i = 0, l = Input.length(); i < l; i++){
			Output += (char)((((int)Input.charAt(i) + 4) % 128) ^ bkey); // mod 128 is to handle the casses where adding 4 goes over 127
			
		}
		encrypted = Output;
	}
	/** This function does everything that textEncrypt does to the string Input but in opposte order.
		@param Input Takes any string as input.
		@param key this is an int that is the casted to a byte value used as the decryption key*/
	public void textDecrypt(String Input, int key){
		byte bkey = (byte)key;
		String Output = new String();
		
		for(int i = 0, l = Input.length(); i < l; i++){
			Output += (char)((((int)Input.charAt(i) ^ bkey) - 4) % 128);
		}
		encrypted = Output;
	}
	/**  <p>
		 Input takes the Input adds the integer value of each char in the string together and then mod 128 the result.
		 This value is then used as an encryption key.
		 </p>
		 @param Input Takes any string as input.
		 @return A byte is returned so it can be used as the second argument for the textEncrypt function
		 */
	public static byte encryptKey(String Input){
		int ikey = 0;
		
		for(int i = 0, l = Input.length(); i < l; i++){
			ikey += (int)Input.charAt(i);
		}
		ikey = ikey % 128;
		
		return (byte)ikey;
	}
}import java.io.*;
import java.util.*;
/** @author David Josephs
* CS242
	@since 2015-10-28
*/
public class FileEncryptor{
	
	SimpleEncryptor encrypt = new SimpleEncryptor();
	
	/** Encrypts the given file
		<p>
		This will take the encryptFile and set everything in it equal to a String using a Scanner. It then uses SimpleEncryptor textEncrypt to encrypt the string.
		This string will then be writen to the output file.
		</p>
		@param encryptFile The file to be encrypted.
		@param outputFile Where the encrypted content of encryptFile is saved to.
		@param key The encryption key can be generated by fileEncryptKey.
		*/
	public void fileEncrypt(File encryptFile, File outputFile, byte key){
		try {
			String text = new String();
			text = new Scanner(encryptFile).useDelimiter("\\A").next();
			encrypt.textEncrypt(text,key);
			
			File output = outputFile;
			BufferedWriter w = new BufferedWriter(new FileWriter(output));
			w.write(encrypt.encrypted);
			w.close();
		}
		catch (IOException e) {
			System.err.println("Caught IOException: " + e.getMessage());
		}
	}
	/** Decrypts the given file
		<p>
		This will take the decryptFile and set everything in it equal to a String using a Scanner. It then uses SimpleEncryptor textDecrypt and a decryption key to decrypt the string.
		This string will then be writen to the output file.
		</p>
		@param decryptFile The file to be decrypted.
		@param outputFile Where the encrypted content of decryptFile is saved to.
		@param key The encryption key provided by the user.
		*/
	
	public void fileDecrypt(File decryptFile, File outputFile, byte key){
		try {
			String text = new String();
			text = new Scanner(decryptFile).useDelimiter("\\A").next();
			encrypt.textDecrypt(text,key);
			
			File output = outputFile;
			BufferedWriter w = new BufferedWriter(new FileWriter(output));
			w.write(encrypt.encrypted);
			w.close();
		}
		catch (IOException e) {
			System.err.println("Caught IOException: " + e.getMessage());
		}
	}
	/**
		Generates the byte that is used as the encryption key.
		@param f Any file.
		@return Returns the length of the file mod 128 cast to a byte.
		*/
	public static byte fileEncryptKey(File f){
		return (byte)((int)f.length() % 128);
	}
}